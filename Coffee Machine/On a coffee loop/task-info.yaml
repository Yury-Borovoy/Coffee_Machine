type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends BaseStageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.FALSE;
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\npublic class CoffeeMachine {\n\
    \    public static void buyCoffee(int water, int milk, int beans, int cups, int\
    \ money) {\n        System.out.println(\"What do you want to buy? \");\n     \
    \   Scanner scanner = new Scanner(System.in);\n        String choiceNumber = scanner.nextLine();\n\
    \    int choiceOfCoffee = Integer.parseInt (choiceNumber);\n        if (choiceOfCoffee\
    \ == 1) {\n         water -= 250;\n         beans -= 16;\n         cups -= 1;\n\
    \         money += 4; \n        }\n        if (choiceOfCoffee == 2){\n       \
    \     water -= 350;\n            milk -= 75;\n            beans -= 20;\n     \
    \       cups -= 1;\n            money += 7;\n        }\n        if (choiceOfCoffee\
    \ == 3){\n            water -= 200;\n            milk -= 100;\n            beans\
    \ -= 12;\n            cups -= 1;\n            money += 6;\n        }\n       \
    \ System.out.println(\"The coffee machine has:\");\n        System.out.println(water\
    \ + \" of water\");\n        System.out.println(milk + \" of milk\");\n      \
    \  System.out.println(beans + \" of coffee beans\");\n        System.out.println(cups\
    \ + \" of disposable cups\");\n        System.out.println(money + \" of money\"\
    );\n    }\n\n    public static void fillCoffee(int water, int milk, int beans,\
    \ int cups, int money){\n        Scanner scanner = new Scanner(System.in);\n \
    \       System.out.println(\"write how many ml of water do you want to add: \"\
    );\n        String choiceWater = scanner.nextLine();\n    int waterFill = Integer.parseInt\
    \ (choiceWater);\n        System.out.println(\"write how many ml of milk do you\
    \ want to add: \");\n        String choiceMilk = scanner.nextLine();\n    int\
    \ milkFill = Integer.parseInt (choiceMilk);\n        System.out.println(\"write\
    \ how many grams of coffee do you want to add: \");\n        String choiceBeans\
    \ = scanner.nextLine();\n    int beansFill = Integer.parseInt (choiceBeans);\n\
    \        System.out.println(\"write how many disposable cups of coffee do you\
    \ want to add: \");\n        String choiceCups = scanner.nextLine();\n    int\
    \ cupsFill = Integer.parseInt (choiceCups);\n        water += waterFill;\n   \
    \     milk += milkFill;\n        beans += beansFill;\n        cups += cupsFill;\n\
    \n        System.out.println(\"The coffee machine has:\");\n        System.out.println(water\
    \ + \" of water\");\n        System.out.println(milk + \" of milk\");\n      \
    \  System.out.println(beans + \" of coffee beans\");\n        System.out.println(cups\
    \ + \" of disposable cups\");\n        System.out.println(money + \" of money\"\
    );\n    }\n\n    public static void takeCoffee(int water, int milk, int beans,\
    \ int cups, int money){\n        System.out.println(\" I gave you $\" + money);\n\
    \        System.out.println(\"The coffee machine has:\");\n        System.out.println(water\
    \ + \" of water\");\n        System.out.println(milk + \" of milk\");\n      \
    \  System.out.println(beans + \" of coffee beans\");\n        System.out.println(cups\
    \ + \" of disposable cups\");\n        System.out.println(0 + \" of money\");\n\
    \    }\n\n\n    public static void main(String[] args) {\n        Scanner scanner\
    \ = new Scanner(System.in);\n        int water = 1200;\n        int milk = 540;\n\
    \        int beans = 120;\n        int cups = 9;\n        int money = 550;\n \
    \       System.out.println(\"The coffee machine has:\");\n        System.out.println(water\
    \ + \" of water\");\n        System.out.println(milk + \" of milk\");\n      \
    \  System.out.println(beans + \" of coffee beans\");\n        System.out.println(cups\
    \ + \" of disposable cups\");\n        System.out.println(money + \" of money\"\
    );\n\n        System.out.println(\"Write action (buy, fill, take): \");\n    \
    \    String number1 = \"buy\";\n        String number2 = \"fill\";\n        String\
    \ number3 = \"take\";\n        String choice = scanner.nextLine();\n        if(choice.equals(number1)){\n\
    \        buyCoffee(water, milk, beans, cups, money);\n        } else if(choice.equals(number2)){\n\
    \        fillCoffee(water, milk, beans, cups, money);\n        } else if(choice.equals(number3)){\n\
    \            takeCoffee(water, milk, beans, cups, money);\n        }\n    }\n}"
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 3
